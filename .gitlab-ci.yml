image: golang

stages:
  - test

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml

unit_tests:
  stage: test
  before_script:
    - go install gotest.tools/gotestsum@latest
  script:
    - go fmt $(go list ./... | grep -v /vendor/)
    - go vet $(go list ./... | grep -v /vendor/)
    - gotestsum --junitfile report.xml --format testname
  artifacts:
    reports:
      junit: report.xml

coverage:
  stage: test
  before_script:
    - go install github.com/boumenot/gocover-cobertura@latest
  script:
    - go test -coverprofile=coverage.txt -covermode count
    - gocover-cobertura < coverage.txt > coverage.xml
  coverage: /^coverage:\s(\d+(?:\.\d+)?%)/
  artifacts:
    reports:
      cobertura: coverage.xml

lint:
  image: registry.gitlab.com/gitlab-org/gitlab-build-images:golangci-lint-alpine
  stage: test
  script:
    # Use default .golangci.yml file from the image if one is not present in the project root.
    - '[ -e .golangci.yml ] || cp /golangci/.golangci.yml .'
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    # remove `--issues-exit-code 0` or set to non-zero to fail the job if linting issues are detected
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json
